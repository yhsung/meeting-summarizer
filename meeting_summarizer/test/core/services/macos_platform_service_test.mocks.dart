// Mocks generated by Mockito 5.4.6 from annotations
// in meeting_summarizer/test/core/services/macos_platform_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i2;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i4;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i6;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i9;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i8;
import 'package:flutter_local_notifications/src/types.dart' as _i10;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i5;
import 'package:meeting_summarizer/core/services/platform_services/macos_menubar_service.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i2.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool?> initialize(
    _i4.InitializationSettings? initializationSettings, {
    _i5.DidReceiveNotificationResponseCallback?
        onDidReceiveNotificationResponse,
    _i5.DidReceiveBackgroundNotificationResponseCallback?
        onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [initializationSettings],
          {
            #onDidReceiveNotificationResponse: onDidReceiveNotificationResponse,
            #onDidReceiveBackgroundNotificationResponse:
                onDidReceiveBackgroundNotificationResponse,
          },
        ),
        returnValue: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);

  @override
  _i3.Future<_i5.NotificationAppLaunchDetails?>
      getNotificationAppLaunchDetails() => (super.noSuchMethod(
            Invocation.method(
              #getNotificationAppLaunchDetails,
              [],
            ),
            returnValue: _i3.Future<_i5.NotificationAppLaunchDetails?>.value(),
          ) as _i3.Future<_i5.NotificationAppLaunchDetails?>);

  @override
  _i3.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i6.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            id,
            title,
            body,
            notificationDetails,
          ],
          {#payload: payload},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancel(
    int? id, {
    String? tag,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [id],
          {#tag: tag},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cancelAll() => (super.noSuchMethod(
        Invocation.method(
          #cancelAll,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i7.TZDateTime? scheduledDate,
    _i6.NotificationDetails? notificationDetails, {
    required _i8.UILocalNotificationDateInterpretation?
        uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i9.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i10.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #zonedSchedule,
          [
            id,
            title,
            body,
            scheduledDate,
            notificationDetails,
          ],
          {
            #uiLocalNotificationDateInterpretation:
                uiLocalNotificationDateInterpretation,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
            #matchDateTimeComponents: matchDateTimeComponents,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i5.RepeatInterval? repeatInterval,
    _i6.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i9.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShow,
          [
            id,
            title,
            body,
            repeatInterval,
            notificationDetails,
          ],
          {
            #payload: payload,
            #androidAllowWhileIdle: androidAllowWhileIdle,
            #androidScheduleMode: androidScheduleMode,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
    _i6.NotificationDetails? notificationDetails, {
    _i9.AndroidScheduleMode? androidScheduleMode =
        _i9.AndroidScheduleMode.exact,
    String? payload,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #periodicallyShowWithDuration,
          [
            id,
            title,
            body,
            repeatDurationInterval,
            notificationDetails,
          ],
          {
            #androidScheduleMode: androidScheduleMode,
            #payload: payload,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.PendingNotificationRequest>>
      pendingNotificationRequests() => (super.noSuchMethod(
            Invocation.method(
              #pendingNotificationRequests,
              [],
            ),
            returnValue: _i3.Future<List<_i5.PendingNotificationRequest>>.value(
                <_i5.PendingNotificationRequest>[]),
          ) as _i3.Future<List<_i5.PendingNotificationRequest>>);

  @override
  _i3.Future<List<_i5.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveNotifications,
          [],
        ),
        returnValue: _i3.Future<List<_i5.ActiveNotification>>.value(
            <_i5.ActiveNotification>[]),
      ) as _i3.Future<List<_i5.ActiveNotification>>);
}

/// A class which mocks [MacOSMenuBarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMacOSMenuBarService extends _i1.Mock
    implements _i11.MacOSMenuBarService {
  MockMacOSMenuBarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAvailable => (super.noSuchMethod(
        Invocation.getter(#isAvailable),
        returnValue: false,
      ) as bool);

  @override
  bool get isMenuBarVisible => (super.noSuchMethod(
        Invocation.getter(#isMenuBarVisible),
        returnValue: false,
      ) as bool);

  @override
  set onMenuBarAction(
          void Function(
            _i11.MenuBarAction,
            Map<String, dynamic>?,
          )? _onMenuBarAction) =>
      super.noSuchMethod(
        Invocation.setter(
          #onMenuBarAction,
          _onMenuBarAction,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onSpotlightSearch(
          void Function(
            String,
            _i11.SpotlightResultType,
          )? _onSpotlightSearch) =>
      super.noSuchMethod(
        Invocation.setter(
          #onSpotlightSearch,
          _onSpotlightSearch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> updateRecordingState({
    required bool? isRecording,
    bool? isPaused = false,
    Duration? duration,
    String? meetingTitle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRecordingState,
          [],
          {
            #isRecording: isRecording,
            #isPaused: isPaused,
            #duration: duration,
            #meetingTitle: meetingTitle,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateTranscriptionState({
    required bool? isTranscribing,
    double? progress = 0.0,
    String? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTranscriptionState,
          [],
          {
            #isTranscribing: isTranscribing,
            #progress: progress,
            #status: status,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setMenuBarVisibility(bool? visible) => (super.noSuchMethod(
        Invocation.method(
          #setMenuBarVisibility,
          [visible],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> handleMenuBarAction(
    String? actionId,
    Map<String, dynamic>? parameters,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleMenuBarAction,
          [
            actionId,
            parameters,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> indexRecordingForSpotlight({
    required String? recordingId,
    required String? title,
    required DateTime? createdAt,
    Duration? duration,
    List<String>? keywords,
    String? transcriptionText,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexRecordingForSpotlight,
          [],
          {
            #recordingId: recordingId,
            #title: title,
            #createdAt: createdAt,
            #duration: duration,
            #keywords: keywords,
            #transcriptionText: transcriptionText,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> indexTranscriptionForSpotlight({
    required String? transcriptionId,
    required String? recordingTitle,
    required String? transcriptionText,
    required DateTime? createdAt,
    List<String>? speakers,
    List<String>? topics,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexTranscriptionForSpotlight,
          [],
          {
            #transcriptionId: transcriptionId,
            #recordingTitle: recordingTitle,
            #transcriptionText: transcriptionText,
            #createdAt: createdAt,
            #speakers: speakers,
            #topics: topics,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> handleSpotlightSearch(
    String? query,
    Map<String, dynamic>? userInfo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleSpotlightSearch,
          [
            query,
            userInfo,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeFromSpotlightIndex(List<String>? identifiers) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromSpotlightIndex,
          [identifiers],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearSpotlightIndex() => (super.noSuchMethod(
        Invocation.method(
          #clearSpotlightIndex,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> configureMenu({
    required bool? isRecording,
    required bool? hasRecordings,
    required bool? canTranscribe,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configureMenu,
          [],
          {
            #isRecording: isRecording,
            #hasRecordings: hasRecordings,
            #canTranscribe: canTranscribe,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setupDragAndDrop() => (super.noSuchMethod(
        Invocation.method(
          #setupDragAndDrop,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> getMenuBarMetrics() => (super.noSuchMethod(
        Invocation.method(
          #getMenuBarMetrics,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> configureKeyboardShortcuts({
    String? startRecordingShortcut,
    String? stopRecordingShortcut,
    String? openAppShortcut,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #configureKeyboardShortcuts,
          [],
          {
            #startRecordingShortcut: startRecordingShortcut,
            #stopRecordingShortcut: stopRecordingShortcut,
            #openAppShortcut: openAppShortcut,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
