name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FLUTTER_VERSION: '3.32.4'

jobs:
  # Job 1: Code Quality and Analysis
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          **/.dart_tool/package_config.json
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
    
    - name: Install dependencies
      working-directory: ./meeting_summarizer
      run: flutter pub get
    
    - name: Verify formatting
      working-directory: ./meeting_summarizer
      run: dart format --output=none --set-exit-if-changed .
    
    - name: Analyze project source
      working-directory: ./meeting_summarizer
      run: flutter analyze --fatal-infos
    
    - name: Run very_good_analysis
      working-directory: ./meeting_summarizer
      run: flutter analyze

  # Job 2: Unit and Widget Tests with Coverage
  test:
    name: Unit & Widget Tests with Coverage
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          **/.dart_tool/package_config.json
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
    
    - name: Install system dependencies for coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov bc
    
    - name: Install dependencies
      working-directory: ./meeting_summarizer
      run: flutter pub get
    
    - name: Run comprehensive coverage analysis
      working-directory: ./meeting_summarizer
      run: |
        # Make scripts executable
        chmod +x scripts/run_coverage.sh
        
        # Run coverage with comprehensive analysis
        ./scripts/run_coverage.sh --enforce --upload
      env:
        CI: true
    
    - name: Check coverage quality gates
      working-directory: ./meeting_summarizer
      run: |
        # Extract coverage percentage from generated report
        if [ -f "coverage/coverage_percent.txt" ]; then
          COVERAGE=$(cat coverage/coverage_percent.txt)
          echo "Current coverage: $COVERAGE%"
          
          # Minimum coverage threshold (80%)
          MINIMUM=80.0
          
          if (( $(echo "$COVERAGE < $MINIMUM" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below minimum threshold $MINIMUM%"
            echo "::error title=Coverage Too Low::Coverage $COVERAGE% is below the minimum threshold of $MINIMUM%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets minimum threshold $MINIMUM%"
            echo "::notice title=Coverage Success::Coverage $COVERAGE% meets quality standards"
          fi
        else
          echo "⚠️ Coverage percentage file not found"
        fi
    
    - name: Generate coverage summary for PR
      if: github.event_name == 'pull_request'
      working-directory: ./meeting_summarizer
      run: |
        if [ -f "coverage/coverage-summary.md" ]; then
          echo "## 📊 Code Coverage Report" >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.md >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          meeting_summarizer/coverage/
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: (success() || failure()) && env.CODECOV_TOKEN != ''
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: meeting_summarizer/coverage/lcov.info
        flags: unittests
        name: meeting-summarizer-coverage
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload to Coveralls
      uses: coverallsapp/github-action@v2
      if: (success() || failure()) && env.COVERALLS_REPO_TOKEN != ''
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: meeting_summarizer/coverage/lcov.info
        flag-name: Unit Tests
        parallel: false
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './meeting_summarizer/coverage/coverage_percent.txt';
          
          if (fs.existsSync(path)) {
            const coverage = fs.readFileSync(path, 'utf8').trim();
            const threshold = 80.0;
            const status = parseFloat(coverage) >= threshold ? '✅' : '❌';
            const statusText = parseFloat(coverage) >= threshold ? 'PASSED' : 'FAILED';
            
            const comment = `## ${status} Code Coverage Report
            
            **Coverage:** ${coverage}%  
            **Threshold:** ${threshold}%  
            **Status:** ${statusText}
            
            ${parseFloat(coverage) < threshold ? 
              '⚠️ Coverage is below the minimum threshold. Please add more tests.' : 
              '🎉 Coverage meets quality standards!'}
            
            [View detailed coverage report](../actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  # Job 3: Coverage Quality Analysis and Reporting
  coverage_analysis:
    name: Coverage Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trend analysis
    
    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: ./meeting_summarizer/coverage/
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov bc
    
    - name: Run detailed coverage analysis
      working-directory: ./meeting_summarizer
      run: |
        if [ -f "scripts/coverage_analysis.dart" ]; then
          dart run scripts/coverage_analysis.dart
        fi
    
    - name: Generate coverage trend analysis
      working-directory: ./meeting_summarizer
      run: |
        # Create coverage trend data
        CURRENT_COVERAGE=""
        if [ -f "coverage/coverage_percent.txt" ]; then
          CURRENT_COVERAGE=$(cat coverage/coverage_percent.txt)
        fi
        
        # Get previous coverage from last successful run
        PREVIOUS_COVERAGE=""
        if [ -f "coverage/trends.json" ]; then
          PREVIOUS_COVERAGE=$(tail -n 2 coverage/trends.json | head -n 1 | grep -o '"line_coverage":[0-9.]*' | cut -d: -f2 || echo "")
        fi
        
        # Generate trend report
        cat > coverage/trend-analysis.md << EOF
        # Coverage Trend Analysis
        
        ## Current Build
        - **Coverage**: ${CURRENT_COVERAGE}%
        - **Commit**: \${{ github.sha }}
        - **Branch**: \${{ github.ref_name }}
        
        ## Trend Analysis
        EOF
        
        if [ -n "$PREVIOUS_COVERAGE" ] && [ -n "$CURRENT_COVERAGE" ]; then
          CHANGE=$(echo "$CURRENT_COVERAGE - $PREVIOUS_COVERAGE" | bc -l)
          if (( $(echo "$CHANGE > 0" | bc -l) )); then
            echo "- **Trend**: 📈 Improved by ${CHANGE}%" >> coverage/trend-analysis.md
          elif (( $(echo "$CHANGE < 0" | bc -l) )); then
            echo "- **Trend**: 📉 Decreased by ${CHANGE#-}%" >> coverage/trend-analysis.md
          else
            echo "- **Trend**: ➡️ No change" >> coverage/trend-analysis.md
          fi
        else
          echo "- **Trend**: 🆕 First measurement" >> coverage/trend-analysis.md
        fi
    
    - name: Upload comprehensive coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-coverage-analysis
        path: |
          meeting_summarizer/coverage/
        retention-days: 90
    
    - name: Update coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Coverage badge will be available as an artifact
        echo "Coverage badge generated and available in artifacts"

  # Job 4: Integration Tests
  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: analyze
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache Flutter dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          **/.dart_tool/package_config.json
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-flutter-
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
        cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'
    
    - name: Install dependencies
      working-directory: ./meeting_summarizer
      run: flutter pub get
    
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-29

    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        script: echo "Generated AVD snapshot for caching."

    - name: Run integration tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        script: |
          cd meeting_summarizer
          flutter test integration_test/

  # Job 4: Build Matrix for Multiple Platforms
  build:
    name: Build - ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: [test]
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            build_cmd: flutter build apk --debug --split-per-abi
            artifact_name: android-debug-apks
            artifact_path: meeting_summarizer/build/app/outputs/flutter-apk/*.apk

          - platform: web
            os: ubuntu-latest
            build_cmd: flutter build web --dart-define=FLUTTER_WEB_USE_SKIA=true
            artifact_name: web-build
            artifact_path: meeting_summarizer/build/web

          - platform: macos
            os: macos-latest
            build_cmd: flutter build macos --debug
            artifact_name: macos-debug-app
            artifact_path: meeting_summarizer/build/macos/Build/Products/Debug/*.app

          - platform: windows
            os: windows-latest
            build_cmd: flutter build windows --debug
            artifact_name: windows-debug-build
            artifact_path: meeting_summarizer/build/windows/x64/runner/Debug

          - platform: ios
            os: macos-latest
            build_cmd: flutter build ios --debug --simulator
            artifact_name: ios-debug-build
            artifact_path: meeting_summarizer/build/ios

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      # Platform-specific setup
      - name: Setup Android SDK
        if: matrix.platform == 'android'
        uses: android-actions/setup-android@v3

      - name: Cache Gradle dependencies
        if: matrix.platform == 'android'
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Java
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Xcode
        if: matrix.platform == 'ios'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Visual Studio Build Tools
        if: matrix.platform == 'windows'
        uses: microsoft/setup-msbuild@v2

      # Flutter setup and dependencies
      - name: Install dependencies
        working-directory: ./meeting_summarizer
        run: flutter pub get

      - name: Enable platform support
        working-directory: ./meeting_summarizer
        run: |
          case "${{ matrix.platform }}" in
            macos) flutter config --enable-macos-desktop ;;
            windows) flutter config --enable-windows-desktop ;;
            web) flutter config --enable-web ;;
          esac

      # Platform-specific build commands  
      - name: Build ${{ matrix.platform }}
        working-directory: ./meeting_summarizer
        run: ${{ matrix.build_cmd }}

      # Upload artifacts
      - name: Upload ${{ matrix.platform }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 30

  # Job 5: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Install dependencies
        working-directory: ./meeting_summarizer
        run: flutter pub get

      - name: Build web for performance analysis
        working-directory: ./meeting_summarizer
        run: flutter build web --profile --dart-define=FLUTTER_WEB_USE_SKIA=true

      - name: Analyze bundle size
        working-directory: ./meeting_summarizer
        run: |
          echo "Web build size analysis:"
          du -sh build/web/
          find build/web -name "*.js" -exec du -h {} \; | sort -hr | head -10

  # Job 7: Release Build (only on main branch)
  release:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool/package_config.json
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Install dependencies
        working-directory: ./meeting_summarizer
        run: flutter pub get

      - name: Build release APK
        working-directory: ./meeting_summarizer
        run: flutter build apk --release --split-per-abi

      - name: Build release AAB
        working-directory: ./meeting_summarizer
        run: flutter build appbundle --release

      - name: Build web release
        working-directory: ./meeting_summarizer
        run: flutter build web --release --dart-define=FLUTTER_WEB_USE_SKIA=true

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds
          path: |
            meeting_summarizer/build/app/outputs/flutter-apk/*.apk
            meeting_summarizer/build/app/outputs/bundle/release/*.aab
            meeting_summarizer/build/web
          retention-days: 90

  # Job 8: Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [release]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # Note: 'staging' environment should be configured in repository settings
    # Remove the environment line below if not using GitHub environments
    # environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds
          path: ./release

      - name: Deploy web build to staging
        run: |
          echo "Deploying web build to staging environment..."
          echo "Web build files:"
          ls -la ./release/build/web/

      - name: Notify deployment completion
        run: |
          echo "✅ Deployment to staging completed successfully"
          echo "📱 Android APK and AAB builds are ready"
          echo "🌐 Web build deployed to staging"
